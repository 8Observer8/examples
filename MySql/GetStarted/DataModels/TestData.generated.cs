//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DataModel
{
	/// <summary>
	/// Database       : testdata
	/// Data Source    : DBHost
	/// Server Version : 5.5.28
	/// </summary>
	public partial class testdataDB : LinqToDB.Data.DataConnection
	{
		public ITable<alltype>      alltypes       { get { return this.GetTable<alltype>(); } }
		public ITable<binarydata>   binarydatas    { get { return this.GetTable<binarydata>(); } }
		public ITable<child>        children       { get { return this.GetTable<child>(); } }
		public ITable<datatypetest> datatypetests  { get { return this.GetTable<datatypetest>(); } }
		public ITable<doctor>       doctors        { get { return this.GetTable<doctor>(); } }
		public ITable<grandchild>   grandchilds    { get { return this.GetTable<grandchild>(); } }
		public ITable<linqdatatype> linqdatatypes  { get { return this.GetTable<linqdatatype>(); } }
		public ITable<parent>       parents        { get { return this.GetTable<parent>(); } }
		public ITable<patient>      patients       { get { return this.GetTable<patient>(); } }
		public ITable<person>       people         { get { return this.GetTable<person>(); } }
		public ITable<testidentity> testidentities { get { return this.GetTable<testidentity>(); } }
		public ITable<testsamename> testsamenames  { get { return this.GetTable<testsamename>(); } }

		public testdataDB()
		{
		}

		public testdataDB(string configuration)
			: base(configuration)
		{
		}
	}

	[Table("alltypes")]
	public partial class alltype
	{
		[PrimaryKey, Identity] public object ID                  { get; set; } // int(11)
		[Column,     Nullable] public object bigintDataType      { get; set; } // bigint(20)
		[Column,     Nullable] public object smallintDataType    { get; set; } // smallint(6)
		[Column,     Nullable] public object tinyintDataType     { get; set; } // tinyint(4)
		[Column,     Nullable] public object mediumintDataType   { get; set; } // mediumint(9)
		[Column,     Nullable] public object intDataType         { get; set; } // int(11)
		[Column,     Nullable] public object numericDataType     { get; set; } // decimal(10,0)
		[Column,     Nullable] public object decimalDataType     { get; set; } // decimal(10,0)
		[Column,     Nullable] public object doubleDataType      { get; set; } // double
		[Column,     Nullable] public object floatDataType       { get; set; } // float
		[Column,     Nullable] public object dateDataType        { get; set; } // date
		[Column,     Nullable] public object datetimeDataType    { get; set; } // datetime
		[Column,     Nullable] public object timestampDataType   { get; set; } // timestamp
		[Column,     Nullable] public object timeDataType        { get; set; } // time
		[Column,     Nullable] public object yearDataType        { get; set; } // year(4)
		[Column,     Nullable] public object year2DataType       { get; set; } // year(2)
		[Column,     Nullable] public object year4DataType       { get; set; } // year(4)
		[Column,     Nullable] public object charDataType        { get; set; } // char(1)
		[Column,     Nullable] public object varcharDataType     { get; set; } // varchar(20)
		[Column,     Nullable] public object textDataType        { get; set; } // text
		[Column,     Nullable] public object binaryDataType      { get; set; } // binary(3)
		[Column,     Nullable] public object varbinaryDataType   { get; set; } // varbinary(5)
		[Column,     Nullable] public object blobDataType        { get; set; } // blob
		[Column,     Nullable] public object bitDataType         { get; set; } // bit(3)
		[Column,     Nullable] public object enumDataType        { get; set; } // enum('Green','Red','Blue')
		[Column,     Nullable] public object setDataType         { get; set; } // set('one','two')
		[Column,     Nullable] public object intUnsignedDataType { get; set; } // int(10) unsigned
	}

	[Table("binarydata")]
	public partial class binarydata
	{
		[PrimaryKey, Identity] public object BinaryDataID { get; set; } // int(11)
		[Column,     NotNull ] public object Stamp        { get; set; } // timestamp
		[Column,     NotNull ] public object Data         { get; set; } // varbinary(1024)
	}

	[Table("child")]
	public partial class child
	{
		[Column, Nullable] public object ParentID { get; set; } // int(11)
		[Column, Nullable] public object ChildID  { get; set; } // int(11)
	}

	[Table("datatypetest")]
	public partial class datatypetest
	{
		[PrimaryKey, Identity   ] public object DataTypeID { get; set; } // int(11)
		[Column,        Nullable] public object Binary_    { get; set; } // binary(50)
		[Column,     NotNull    ] public object Boolean_   { get; set; } // bit(1)
		[Column,        Nullable] public object Byte_      { get; set; } // tinyint(4)
		[Column,        Nullable] public object Bytes_     { get; set; } // varbinary(50)
		[Column,        Nullable] public object Char_      { get; set; } // char(1)
		[Column,        Nullable] public object DateTime_  { get; set; } // datetime
		[Column,        Nullable] public object Decimal_   { get; set; } // decimal(20,2)
		[Column,        Nullable] public object Double_    { get; set; } // float
		[Column,        Nullable] public object Guid_      { get; set; } // varbinary(50)
		[Column,        Nullable] public object Int16_     { get; set; } // smallint(6)
		[Column,        Nullable] public object Int32_     { get; set; } // int(11)
		[Column,        Nullable] public object Int64_     { get; set; } // bigint(20)
		[Column,        Nullable] public object Money_     { get; set; } // decimal(20,4)
		[Column,        Nullable] public object SByte_     { get; set; } // tinyint(4)
		[Column,        Nullable] public object Single_    { get; set; } // double
		[Column,        Nullable] public object Stream_    { get; set; } // varbinary(50)
		[Column,        Nullable] public object String_    { get; set; } // varchar(50)
		[Column,        Nullable] public object UInt16_    { get; set; } // smallint(6)
		[Column,        Nullable] public object UInt32_    { get; set; } // int(11)
		[Column,        Nullable] public object UInt64_    { get; set; } // bigint(20)
		[Column,        Nullable] public object Xml_       { get; set; } // varchar(1000)
	}

	[Table("doctor")]
	public partial class doctor
	{
		[PrimaryKey, NotNull] public object PersonID { get; set; } // int(11)
		[Column,     NotNull] public object Taxonomy { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public person DoctorPerson { get; set; }

		#endregion
	}

	[Table("grandchild")]
	public partial class grandchild
	{
		[Column, Nullable] public object ParentID     { get; set; } // int(11)
		[Column, Nullable] public object ChildID      { get; set; } // int(11)
		[Column, Nullable] public object GrandChildID { get; set; } // int(11)
	}

	[Table("linqdatatypes")]
	public partial class linqdatatype
	{
		[Column, Nullable] public object ID             { get; set; } // int(11)
		[Column, Nullable] public object MoneyValue     { get; set; } // decimal(10,4)
		[Column, Nullable] public object DateTimeValue  { get; set; } // datetime
		[Column, Nullable] public object DateTimeValue2 { get; set; } // datetime
		[Column, Nullable] public object BoolValue      { get; set; } // tinyint(1)
		[Column, Nullable] public object GuidValue      { get; set; } // char(36)
		[Column, Nullable] public object BinaryValue    { get; set; } // varbinary(5000)
		[Column, Nullable] public object SmallIntValue  { get; set; } // smallint(6)
		[Column, Nullable] public object IntValue       { get; set; } // int(11)
		[Column, Nullable] public object BigIntValue    { get; set; } // bigint(20)
	}

	[Table("parent")]
	public partial class parent
	{
		[Column, Nullable] public object ParentID { get; set; } // int(11)
		[Column, Nullable] public object Value1   { get; set; } // int(11)
	}

	[Table("patient")]
	public partial class patient
	{
		[PrimaryKey, NotNull] public object PersonID  { get; set; } // int(11)
		[Column,     NotNull] public object Diagnosis { get; set; } // varchar(256)

		#region Associations

		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public person PatientPerson { get; set; }

		#endregion
	}

	[Table("person")]
	public partial class person
	{
		[PrimaryKey, Identity   ] public object PersonID   { get; set; } // int(11)
		[Column,     NotNull    ] public object FirstName  { get; set; } // varchar(50)
		[Column,     NotNull    ] public object LastName   { get; set; } // varchar(50)
		[Column,        Nullable] public object MiddleName { get; set; } // varchar(50)
		[Column,     NotNull    ] public object Gender     { get; set; } // char(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public doctor DoctorPerson { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false)]
		public patient PatientPerson { get; set; }

		#endregion
	}

	[Table("testidentity")]
	public partial class testidentity
	{
		[PrimaryKey, Identity] public object ID { get; set; } // int(11)
	}

	[Table("testsamename")]
	public partial class testsamename
	{
		[PrimaryKey, NotNull] public object ID { get; set; } // int(11)
	}

	public static partial class tableExtensions
	{
		public static alltype Find(this ITable<alltype> table, object ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static binarydata Find(this ITable<binarydata> table, object BinaryDataID)
		{
			return table.FirstOrDefault(t =>
				t.BinaryDataID == BinaryDataID);
		}

		public static datatypetest Find(this ITable<datatypetest> table, object DataTypeID)
		{
			return table.FirstOrDefault(t =>
				t.DataTypeID == DataTypeID);
		}

		public static doctor Find(this ITable<doctor> table, object PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static patient Find(this ITable<patient> table, object PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static person Find(this ITable<person> table, object PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static testidentity Find(this ITable<testidentity> table, object ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static testsamename Find(this ITable<testsamename> table, object ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
